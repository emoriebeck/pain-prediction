value_test <- ( c(multiple_R) * scores_best.z_test * sd_data ) + mean_data
# Step 5. You have your predicted test values. Look at them to make sure they make sense!!
temp <- data.frame(crit_actual = x_test$o_value, crit_predicted = value_test)
# Get the rmse and rsq.
final_metrics <- bind_rows(
rmse(temp, crit_actual, crit_predicted),
rsq(temp, crit_actual, crit_predicted)
)
save(final_metrics
, file = sprintf("%s/05-results/02-biscwit/06-final-model-performance/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
## variable importance
## reformatted to match the output of the vi() function in the vip package
final_var_imp <- data.frame(Importance = final_biscwit$R) %>%
rownames_to_column("Variable") %>%
mutate(Sign = ifelse(sign(Importance) == 1, "POS", "NEG")) %>%
as_tibble() %>%
arrange(desc(abs(Importance))) %>%
slice_max(abs(Importance), n = 10)
save(final_var_imp
, file = sprintf("%s/05-results/02-biscwit/05-variable-importance/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
## roc curve of test data
# p_roc <- roc_curve(
#   temp %>% mutate(crit_actual = as.factor(crit_actual))
#   , truth = crit_actual
#   , crit_predicted
#   )  %>%
#   autoplot() +
#   labs(title = sprintf("Participant %s: %s, %s, %s"
#                        , sid, outcome, group, time))
# ggsave(p_roc, file = sprintf("%s/05-results/02-biscwit/04-roc-curves/%s_%s_%s_%s.png",
#              res_path, sid, outcome, group, time)
#        , width = 5, height = 5)
rm(list = ls())
gc()
return(T)
}
done
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done)
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>% filter(is.na(done))
done <- tibble(file = list.files(sprintf("%s/05-results/02-biscwit/06-final-model-performance", res_path)), done = "done")
plan(multisession(workers = 12L))
res <- tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>% filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, mod = future_pmap(
list(SID, outcome, group, time)
, biscwit_fun
, .progress = T
, .options = future_options(
globals = c("res_path", "biscwit_call")
, packages = c("plyr", "tidyverse", "psych", "tidymodels", "vip")
)
)
)
closeAllConnections()
done <- tibble(file = list.files(sprintf("%s/05-results/01-glmnet/06-final-model-performance", res_path))) %>%
mutate(done = "done")
done <- tibble(file = list.files(sprintf("%s/05-results/01-glmnet/06-final-model-performance", res_path))) %>%
mutate(done = "done")
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")) %>%
write_csv(., file = sprintf("%s/04-scripts/99-cluster/args/glmnet.csv", local_path))
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData"))
done <- tibble(file = list.files(sprintf("%s/05-results/02-biscwit/06-final-model-performance", res_path)), done = "done")
plan(multisession(workers = 12L))
res <- tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>% filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, mod = future_pmap(
list(SID, outcome, group, time)
, possibly(biscwit_fun, NA_real_)
, .progress = T
, .options = future_options(
globals = c("res_path", "biscwit_call")
, packages = c("plyr", "tidyverse", "psych", "tidymodels", "vip")
)
)
)
closeAllConnections()
done <- tibble(file = list.files(sprintf("%s/05-results/01-glmnet/06-final-model-performance", res_path))) %>%
mutate(done = "done")
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")) %>%
write_csv(., file = sprintf("%s/04-scripts/99-cluster/args/glmnet.csv", local_path))
done <- tibble(file = list.files(sprintf("%s/05-results/01-glmnet/06-final-model-performance", res_path))) %>%
mutate(done = "done")
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done)
debug(elnet_fun)
dummy_vars <- c("caregiving", "chores", "exercise", "internet", "mentalAct", "nothing", "otherAct"
, "selfcare", "socialOnline", "TV", "volunteer", "relaxed", "sitting", "standing"
, "acquaintance", "alone", "family", "friend", "kids", "neighbor"," otherPerson"
, "partner", "pet", "stranger", "socialPerson")
time_dummy <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
, "morning", "midday", "evening", "night")
elnet_fun <- function(sid, outcome, group, time){
# load the data
load(sprintf("%s/02-data/03-train-data/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
d_train <- d_train %>% arrange(Full_Date) %>% select(-Full_Date)
d_train_cv <- rolling_origin(
d_train,
initial = 15,
skip = 2,
assess = 1,
cumulative = F
)
# set up the cross-valiation folds
# set.seed(234)
# d_train_cv <- vfold_cv(d_train, v = 10)
# set up the data and formula
mod_recipe <- recipe(
o_value ~ .
, data = d_train
) %>%
step_nzv(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
step_dummy(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
step_zv(all_numeric()) %>%
step_normalize(all_numeric()) %>%
# estimate the means and standard deviations
prep(training = d_train, retain = TRUE)
# set up the model specifications
tune_spec <-
linear_reg(
penalty = tune()
, mixture = tune()
) %>%
set_engine("glmnet") %>%
set_mode("regression")
# set up the ranges for the tuning functions
elnet_grid <-
grid_regular(
penalty()
, mixture()
, levels = 10
)
# set up the workflow: combine modeling spec with modeling recipe
set.seed(345)
elnet_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(mod_recipe)
# combine the workflow, and grid to a final tuning model
elnet_res <-
elnet_wf %>%
tune_grid(
resamples = d_train_cv
, grid = elnet_grid
, control = control_resamples(save_pred = T)
)
save(elnet_res, file = sprintf("%s/05-results/01-glmnet/01-tuning-models/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# plot the metrics across tuning parameters
p <- elnet_res %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = mixture)) +
geom_point(size = 2) +
facet_wrap(~ .metric, scales = "free", nrow = 2) +
scale_x_log10(labels = scales::label_number()) +
scale_color_gradient(low = "gray90", high = "red") +
theme_classic()
ggsave(p, file = sprintf("%s/05-results/01-glmnet/02-tuning-figures/%s_%s_%s_%s.png",
res_path, sid, outcome, group, time)
, width = 5, height = 8)
# select the best model based on AUC
best_elnet <- elnet_res %>%
# select_best("roc_auc")
select_best("rmse")
# set up the workflow for the best model
final_wf <-
elnet_wf %>%
finalize_workflow(best_elnet)
# run the final best model on the training data and save
final_elnet <-
final_wf %>%
fit(data = d_train)
# load the split data
load(sprintf("%s/02-data/04-test-data/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# d_split$data$o_value <- factor(d_split$data$o_value)
# run the final fit workflow of the training and test data together
final_fit <-
final_wf %>%
last_fit(d_split)
save(final_elnet, final_fit
, file = sprintf("%s/05-results/01-glmnet/03-final-training-models/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# final metrics (accuracy and roc)
final_metrics <- final_fit %>%
collect_metrics(summarize = T)
save(final_metrics
, file = sprintf("%s/05-results/01-glmnet/06-final-model-performance/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# variable importance
final_var_imp <- final_elnet %>%
extract_fit_parsnip() %>%
vi() %>%
slice_max(Importance, n = 10)
save(final_var_imp
, file = sprintf("%s/05-results/01-glmnet/05-variable-importance/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# # roc plot
# p_roc <- final_fit %>%
#   collect_predictions() %>%
#   roc_curve(.pred, truth = o_value) %>%
#   autoplot() +
#   labs(title = sprintf("Participant %s: %s, %s, %s, %s"
#                        , sid, outcome, group, set, time))
# ggsave(p_roc, file = sprintf("%s/05-results/01-glmnet/04-roc-curves/%s_%s_%s_%s_%s.png",
#              res_path, sid, outcome, group, set, time)
#        , width = 5, height = 5)
rm(list = c("final_var_imp", "final_metrics", "final_wf", "final_elnet", "final_fit"
, "best_elnet", "elnet_res", "elnet_wf", "elnet_grid", "tune_spec", "mod_recipe"
, "p", "p_roc", "d_split", "d_test", "d_train", "d_train_cv"))
gc()
return(T)
}
# plan(multisession(workers = 12L))
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
# , mod = future_pmap(
, mod = pmap(
list(SID, outcome, group, time)
, possibly(elnet_fun, NA_real_)
# , .progress = T
# , .options = future_options(
#   globals = c("res_path", "dummy_vars")
#   , packages = c("plyr", "tidyverse", "glmnet", "tidymodels", "vip")
# )
)
)
debug(elnet_fun)
# plan(multisession(workers = 12L))
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
# , mod = future_pmap(
, mod = pmap(
list(SID, outcome, group, time)
# , possibly(elnet_fun, NA_real_)
, elnet_fun
# , .progress = T
# , .options = future_options(
#   globals = c("res_path", "dummy_vars")
#   , packages = c("plyr", "tidyverse", "glmnet", "tidymodels", "vip")
# )
)
)
d_train_cv
d_train
d_train %>% View
d_train_cv
mod_recipe
tibble(
file = sprintf("%s/02-data/02-model-data", res_path) %>% list.files()
) %>%
full_join(done) %>%
filter(is.na(done)) %>% select(-done) %>%
separate(file, c("SID", "outcome", "group", "time"), sep = "_")
sid = "10297"; outcome = "lonely"; group = "situation"; time = "time"
dummy_vars <- c("caregiving", "chores", "exercise", "internet", "mentalAct", "nothing", "otherAct"
, "selfcare", "socialOnline", "TV", "volunteer", "relaxed", "sitting", "standing"
, "acquaintance", "alone", "family", "friend", "kids", "neighbor"," otherPerson"
, "partner", "pet", "stranger", "socialPerson")
time_dummy <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
, "morning", "midday", "evening", "night")
time_vars <- c("cos1p", "cos2p", "cub", "linear", "quad", "sin1p", "sin2p")
# load the data
load(sprintf("%s/02-data/03-train-data/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
d_train <- d_train %>% arrange(Full_Date) %>% select(-Full_Date)
d_train_cv <- rolling_origin(
d_train,
initial = 15,
skip = 2,
assess = 1,
cumulative = F
)
# set up the data and formula
mod_recipe <- recipe(
o_value ~ .
, data = d_train
) %>%
step_zv(all_numeric()) %>%
step_normalize(all_numeric(), -one_of(time_vars)) %>%
step_nzv(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
step_dummy(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
# estimate the means and standard deviations
prep(training = d_train, retain = TRUE)
mod_recipe
# set up the model specifications
tune_spec <-
linear_reg(
penalty = tune()
, mixture = tune()
) %>%
set_engine("glmnet") %>%
set_mode("regression")
# set up the ranges for the tuning functions
elnet_grid <-
grid_regular(
penalty()
, mixture()
, levels = 10
)
# set up the workflow: combine modeling spec with modeling recipe
set.seed(345)
elnet_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(mod_recipe)
# combine the workflow, and grid to a final tuning model
elnet_res <-
elnet_wf %>%
tune_grid(
resamples = d_train_cv
, grid = elnet_grid
, control = control_resamples(save_pred = T)
)
elnet_res
elnet_res$.notes[[1]]
elnet_res$.notes[[2]]
elnet_res$.notes[[3]]
elnet_res$.notes[[4]]
elnet_res$.notes[[5]]
debug(glmnet)
# combine the workflow, and grid to a final tuning model
elnet_res <-
elnet_wf %>%
tune_grid(
resamples = d_train_cv
, grid = elnet_grid
, control = control_resamples(save_pred = T)
)
d_train_cv
d_train_cv <- rolling_origin(
d_train,
initial = 15,
skip = 2,
assess = 5,
cumulative = F
)
d_train_cv
# set up the data and formula
mod_recipe <- recipe(
o_value ~ .
, data = d_train
) %>%
step_zv(all_numeric()) %>%
step_normalize(all_numeric(), -one_of(time_vars)) %>%
step_nzv(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
step_dummy(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
# estimate the means and standard deviations
prep(training = d_train, retain = TRUE)
# set up the model specifications
tune_spec <-
linear_reg(
penalty = tune()
, mixture = tune()
) %>%
set_engine("glmnet") %>%
set_mode("regression")
# set up the ranges for the tuning functions
elnet_grid <-
grid_regular(
penalty()
, mixture()
, levels = 10
)
# set up the workflow: combine modeling spec with modeling recipe
set.seed(345)
elnet_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(mod_recipe)
# combine the workflow, and grid to a final tuning model
elnet_res <-
elnet_wf %>%
tune_grid(
resamples = d_train_cv
, grid = elnet_grid
, control = control_resamples(save_pred = T)
)
d_train_cv <- rolling_origin(
d_train,
initial = 15,
skip = 2,
assess = 5,
cumulative = T
)
# set up the data and formula
mod_recipe <- recipe(
o_value ~ .
, data = d_train
) %>%
step_zv(all_numeric()) %>%
step_normalize(all_numeric(), -one_of(time_vars)) %>%
step_nzv(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
step_dummy(one_of(dummy_vars, time_dummy), -all_outcomes()) %>%
# estimate the means and standard deviations
prep(training = d_train, retain = TRUE)
# set up the model specifications
tune_spec <-
linear_reg(
penalty = tune()
, mixture = tune()
) %>%
set_engine("glmnet") %>%
set_mode("regression")
# set up the ranges for the tuning functions
elnet_grid <-
grid_regular(
penalty()
, mixture()
, levels = 10
)
# set up the workflow: combine modeling spec with modeling recipe
set.seed(345)
elnet_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(mod_recipe)
# combine the workflow, and grid to a final tuning model
elnet_res <-
elnet_wf %>%
tune_grid(
resamples = d_train_cv
, grid = elnet_grid
, control = control_resamples(save_pred = T)
)
elnet_res
# plot the metrics across tuning parameters
p <- elnet_res %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = mixture)) +
geom_point(size = 2) +
facet_wrap(~ .metric, scales = "free", nrow = 2) +
scale_x_log10(labels = scales::label_number()) +
scale_color_gradient(low = "gray90", high = "red") +
theme_classic()
# select the best model based on AUC
best_elnet <- elnet_res %>%
# select_best("roc_auc")
select_best("rmse")
best_elnet
# set up the workflow for the best model
final_wf <-
elnet_wf %>%
finalize_workflow(best_elnet)
# run the final best model on the training data and save
final_elnet <-
final_wf %>%
fit(data = d_train)
# load the split data
load(sprintf("%s/02-data/04-test-data/%s_%s_%s_%s.RData",
res_path, sid, outcome, group, time))
# run the final fit workflow of the training and test data together
final_fit <-
final_wf %>%
last_fit(d_split)
final_fit
# final metrics (accuracy and roc)
final_metrics <- final_fit %>%
collect_metrics(summarize = T)
final_metrics
final_fit
final_fit$.predictions[[1]]
d_split
d_test
d_test %>% View
# run the final fit workflow of the training and test data together
final_fit <-
final_wf %>%
last_fit(d_split)
